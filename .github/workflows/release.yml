name: Release
on:
  push:
    tags:
      - "v*.*.*"


jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Set output tag name
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.vars.outputs.tag }}
          body: |
            Release ${{ steps.vars.outputs.tag }} of SDA-Filesystem/Data Gateway GUI (Graphical User Interface).
            Release ${{ steps.vars.outputs.tag }} of SDA-Filesystem/Data Gateway CLI (Command Line Interface).
            Download artifacts in zip archives below.
  
  build_cli_release:
    name: Upload CLI Release Asset
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: go-fuse
            os_suffix: linux-amd64
            asset_name: go-fuse-cli
          - os: macos-latest
            artifact_name: go-fuse
            os_suffix: macos-amd64
            asset_name: go-fuse-cli
          - os: windows-latest
            artifact_name: go-fuse
            os_suffix: windows-amd64
            asset_name: go-fuse-cli
        golang-version: [1.16]
    
    runs-on: ${{ matrix.os }}
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Golang ${{ matrix.golang-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang-version }}
      - name: Install macOS dependencies
        if: matrix.os == 'macOS-latest'
        run: |
          brew install --cask osxfuse
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install mesa-common-dev libpulse-mainloop-glib0 libpulse0 libfuse-dev -y
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install zip
          choco install WinFsp
      - name: Build CLI artifact Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:CGO_ENABLED=0; go build -o ./go-fuse ./cmd/cli/main.go
      - name: Build CLI artifact
        if: matrix.os != 'windows-latest'
        run: |
          go build -o ./go-fuse ./cmd/cli/main.go
      - name: Archive CLI Asset
        run: |
          zip --junk-paths ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip ${{ matrix.artifact_name }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip
          fail_on_unmatched_files: true

  build_gui_release:
    name: Upload GUI Release Asset
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            os_folder: linux
            os_suffix: linux-amd64
            asset_name: go-fuse-gui
          - os: macos-latest
            os_folder: darwin
            os_suffix: macos-amd64
            asset_name: go-fuse-gui
          - os: windows-latest
            artifact_name: go-fuse
            os_folder: windows
            os_suffix: windows-amd64
            asset_name: go-fuse-gui
        golang-version: [1.16]
    
    runs-on: ${{ matrix.os }}
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Golang ${{ matrix.golang-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang-version }}
      - name: Install macOS dependencies
        if: matrix.os == 'macOS-latest'
        run: |
          brew install --cask osxfuse
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install mesa-common-dev libpulse-mainloop-glib0 libpulse0 libfuse-dev -y
      - name: Install Linux GUI dependencies
        if: (matrix.os == 'ubuntu-latest')
        run: |
          bash ./dev_utils/setup-linux.sh

      - name: Install macOS GUI dependencies
        if: (matrix.os == 'macOS-latest')
        run: |
          export GO111MODULE=off
          go get github.com/therecipe/qt/cmd/... 
          export GO111MODULE=on

          go get github.com/therecipe/qt/internal/binding/files/docs/5.13.0
          go get github.com/therecipe/qt/internal/cmd/moc@v0.0.0-20200904063919-c0c124a5770d

          go install -v -tags=no_env github.com/therecipe/qt/cmd/...
          go mod vendor
          git clone https://github.com/therecipe/env_darwin_amd64_513.git vendor/github.com/therecipe/env_darwin_amd64_513
          
          $(go env GOPATH)/bin/qtsetup

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install zip
          choco install WinFsp

          set GO111MODULE=off
          go get -v github.com/therecipe/qt/cmd/... 
          set GO111MODULE=on

          go install -v -tags=no_env github.com/therecipe/qt/cmd/... 
          go mod vendor
          git clone https://github.com/therecipe/env_windows_amd64_513.git vendor/github.com/therecipe/env_windows_amd64_513

          C:\Users\runneradmin\go\bin\qtsetup.exe

        shell: cmd
      - name: Build GUI artifact Windows
        if: matrix.os == 'windows-latest'
        run: |
          set CPATH=C:\Program Files (x86)\WinFsp\inc\fuse
          C:\Users\runneradmin\go\bin\qtdeploy.exe build desktop cmd/qt/main.go
        shell: cmd
      - name: Build GUI artifact
        if: matrix.os != 'windows-latest'
        run: |
          qtdeploy build desktop cmd/qt/main.go
      - name: Archive GUI Asset Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd cmd/qt/deploy/linux
          mv qt_project sda-fuse
          zip -r ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip .
      - name: Archive GUI Asset macOS
        if: matrix.os == 'macOS-latest'
        run: |
          cd cmd/qt/deploy/darwin
          mv qt_project.app/Contents/MacOS/qt_project qt_project.app/Contents/MacOS/sda-fuse
          zip -r ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip .
      - name: Archive GUI Asset Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd cmd/qt/deploy/windows
          ren qt_project.exe sda-fuse.exe
          zip -r ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip .
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./cmd/qt/deploy/${{ matrix.os_folder }}/${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip
          fail_on_unmatched_files: true
