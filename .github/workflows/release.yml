name: Release
on:
  push:
    tags:
      - "v*.*.*"


jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }} of SDA-Filesystem/Data Gateway GUI (Graphical User Interface).
            Release ${{ github.ref_name }} of SDA-Filesystem/Data Gateway CLI (Command Line Interface).
            Release ${{ github.ref_name }} of Airlock CLI (Command Line Interface)
            Download artifacts in zip archives below.
  
  build_fuse_cli_release:
    name: Upload FUSE CLI Release Asset
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: go-fuse
            os_suffix: linux-amd64
            asset_name: go-fuse-cli
          - os: macos-latest
            artifact_name: go-fuse
            os_suffix: macos-amd64
            asset_name: go-fuse-cli
          - os: windows-latest
            artifact_name: go-fuse
            os_suffix: windows-amd64
            asset_name: go-fuse-cli
        golang-version: [1.19]
    
    runs-on: ${{ matrix.os }}
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Golang ${{ matrix.golang-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang-version }}
      - name: Install macOS dependencies
        if: matrix.os == 'macOS-latest'
        run: |
          brew install --cask osxfuse
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libfuse-dev -y
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install zip
          choco install WinFsp
      - name: Build FUSE CLI artifact Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:CGO_ENABLED=0; go build -o ./go-fuse ./cmd/fuse/main.go
      - name: Build FUSE CLI artifact
        if: matrix.os != 'windows-latest'
        run: |
          go build -o ./go-fuse ./cmd/fuse/main.go
      - name: Archive FUSE CLI Asset
        run: |
          zip --junk-paths ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip ${{ matrix.artifact_name }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip
          fail_on_unmatched_files: true

  build_airlock_cli_release:
    name: Upload Airlock CLI Release Asset
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: go-airlock
            os_suffix: linux-amd64
            asset_name: go-airlock-cli
          - os: macos-latest
            artifact_name: go-airlock
            os_suffix: macos-amd64
            asset_name: go-airlock-cli
          - os: windows-latest
            artifact_name: go-airlock
            os_suffix: windows-amd64
            asset_name: go-airlock-cli
        golang-version: [1.19]
    
    runs-on: ${{ matrix.os }}
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Golang ${{ matrix.golang-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang-version }}
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install zip
      - name: Build Airlock CLI artifact Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:CGO_ENABLED=0; go build -o ./go-airlock ./cmd/airlock/main.go
      - name: Build Airlock CLI artifact
        if: matrix.os != 'windows-latest'
        run: |
          go build -o ./go-airlock ./cmd/airlock/main.go
      - name: Archive Airlock CLI Asset
        run: |
          zip --junk-paths ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip ${{ matrix.artifact_name }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip
          fail_on_unmatched_files: true

  build_gui_release:
    name: Upload GUI Release Asset
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            os_folder: linux
            os_suffix: linux-amd64
            asset_name: go-fuse-gui
          - os: macos-latest
            os_folder: darwin
            os_suffix: macos-amd64
            asset_name: go-fuse-gui
          - os: windows-latest
            artifact_name: go-fuse
            os_folder: windows
            os_suffix: windows-amd64
            asset_name: go-fuse-gui
        golang-version: [1.19]
    
    runs-on: ${{ matrix.os }}
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Golang ${{ matrix.golang-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang-version }}
      - name: Install macOS dependencies
        if: matrix.os == 'macOS-latest'
        run: |
          brew install --cask osxfuse
          brew install node@18
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libgtk-3-dev libwebkit2gtk-4.0-dev npm pkg-config libfuse-dev -y          
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install zip
          choco install nodejs-lts
          choco install webview2-runtime
          choco install WinFsp
      - name: Install GUI dependencies
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          npm install --prefix frontend
          npm run build --prefix frontend

        shell: cmd
      - name: Build GUI artifact Windows
        if: matrix.os == 'windows-latest'
        run: |
          set CPATH=C:\Program Files (x86)\WinFsp\inc\fuse
          cd cmd/gui
          wails build -clean
        shell: cmd
      - name: Build GUI artifact
        if: matrix.os != 'windows-latest'
        run: |
          cd cmd/gui
          wails build -clean
      - name: Archive GUI Asset
        run: |
          cd build/bin
          zip -r ${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip .
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./build/bin/${{ matrix.os_folder }}/${{ matrix.asset_name }}-golang${{ matrix.golang-version }}-${{ matrix.os_suffix }}.zip
          fail_on_unmatched_files: true
